{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signOut, signInWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDdywwosxhPWbb41dUiOGbP9uRIw94odWU',\n  authDomain: 'crwn-clothing-db-f1e8b.firebaseapp.com',\n  projectId: 'crwn-clothing-db-f1e8b',\n  storageBucket: 'crwn-clothing-db-f1e8b.appspot.com',\n  messagingSenderId: '749770346134',\n  appId: '1:749770346134:web:0a66025d32b4b9fe873cb7'\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// Configure auth provider\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account' // Forces user to select account\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\n// Create the database\n\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo\n      });\n    } catch (error) {\n      console.log('Error creating user', error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => signOut(auth);\nexport const getAuthUserFromUserDocRef = async userDocRef => {\n  if (!userDocRef) return;\n  return await getDoc(userDocRef);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signOut","signInWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInfo","arguments","length","undefined","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","getAuthUserFromUserDocRef"],"sources":["/Users/polo/Documents/01-Development/Courses/ReactCourse/crwn-clothing/src/utilities/firebase/firebase.utilities.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signOut,\n  signInWithEmailAndPassword,\n} from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDdywwosxhPWbb41dUiOGbP9uRIw94odWU',\n  authDomain: 'crwn-clothing-db-f1e8b.firebaseapp.com',\n  projectId: 'crwn-clothing-db-f1e8b',\n  storageBucket: 'crwn-clothing-db-f1e8b.appspot.com',\n  messagingSenderId: '749770346134',\n  appId: '1:749770346134:web:0a66025d32b4b9fe873cb7',\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// Configure auth provider\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account', // Forces user to select account\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n\n// Create the database\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInfo = {}\n) => {\n  if (!userAuth) return;\n\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  console.log(userDocRef);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo,\n      });\n    } catch (error) {\n      console.log('Error creating user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signOutUser = async () => signOut(auth);\n\nexport const getAuthUserFromUserDocRef = async (userDocRef) => {\n  if (!userDocRef) return;\n\n  return await getDoc(userDocRef);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}