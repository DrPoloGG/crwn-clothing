{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDdywwosxhPWbb41dUiOGbP9uRIw94odWU',\n  authDomain: 'crwn-clothing-db-f1e8b.firebaseapp.com',\n  projectId: 'crwn-clothing-db-f1e8b',\n  storageBucket: 'crwn-clothing-db-f1e8b.appspot.com',\n  messagingSenderId: '749770346134',\n  appId: '1:749770346134:web:0a66025d32b4b9fe873cb7'\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// Configure auth provider\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account' // Forces user to select account\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\n// Create the database\n\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('Error creating user', error.message);\n    }\n  }\n  return userDocRef;\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message"],"sources":["/Users/polo/Documents/01-Development/Courses/ReactCourse/crwn-clothing/src/utilities/firebase/firebase.utilities.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n} from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDdywwosxhPWbb41dUiOGbP9uRIw94odWU',\n  authDomain: 'crwn-clothing-db-f1e8b.firebaseapp.com',\n  projectId: 'crwn-clothing-db-f1e8b',\n  storageBucket: 'crwn-clothing-db-f1e8b.appspot.com',\n  messagingSenderId: '749770346134',\n  appId: '1:749770346134:web:0a66025d32b4b9fe873cb7',\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// Configure auth provider\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account', // Forces user to select account\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\n\n// Create the database\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n    const userDocRef = doc(db, 'users', userAuth.uid);\n\n    console.log(userDocRef);\n\n    const userSnapshot = await getDoc(userDocRef);\n\n    console.log(userSnapshot);\n    console.log(userSnapshot.exists());\n\n    if (!userSnapshot.exists()) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await setDoc(userDocRef, { displayName, email, createdAt });\n        } catch (error) {\n            console.log( 'Error creating user', error.message );\n        }\n    }\n\n    return userDocRef;\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,QACb,eAAe;AACtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAEtE;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGhB,aAAa,CAACS,cAAc,CAAC;;AAEjD;AACA,MAAMQ,cAAc,GAAG,IAAIb,kBAAkB,CAAC,CAAC;AAE/Ca,cAAc,CAACC,mBAAmB,CAAC;EACjCC,MAAM,EAAE,gBAAgB,CAAE;AAC5B,CAAC,CAAC;;AAEF,OAAO,MAAMC,IAAI,GAAGnB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMoB,qBAAqB,GAAGA,CAAA,KAAMlB,eAAe,CAACiB,IAAI,EAAEH,cAAc,CAAC;AAChF,OAAO,MAAMK,wBAAwB,GAAGA,CAAA,KAAMpB,kBAAkB,CAACkB,IAAI,EAAEH,cAAc,CAAC;;AAGtF;;AAEA,OAAO,MAAMM,EAAE,GAAGlB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC1D,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAG,MAAMvB,MAAM,CAACmB,UAAU,CAAC;EAE7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EACzBF,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAAC,CAAC,CAAC;EAElC,IAAI,CAACD,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;IACxB,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGR,QAAQ;IACvC,MAAMS,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE5B,IAAI;MACA,MAAM3B,MAAM,CAACkB,UAAU,EAAE;QAAEM,WAAW;QAAEC,KAAK;QAAEC;MAAU,CAAC,CAAC;IAC/D,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZR,OAAO,CAACC,GAAG,CAAE,qBAAqB,EAAEO,KAAK,CAACC,OAAQ,CAAC;IACvD;EACJ;EAEA,OAAOX,UAAU;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}